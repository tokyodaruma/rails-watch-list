<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="visual" viewBox="0 0 900 600" width="900" height="600" version="1.1"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><path d="M0 61L82 61L82 85L164 85L164 85L245 85L245 85L327 85L327 25L409 25L409 61L491 61L491 67L573 67L573 61L655 61L655 37L736 37L736 43L818 43L818 37L900 37L900 31L900 0L900 0L818 0L818 0L736 0L736 0L655 0L655 0L573 0L573 0L491 0L491 0L409 0L409 0L327 0L327 0L245 0L245 0L164 0L164 0L82 0L82 0L0 0Z" fill="#fafa69"/><path d="M0 85L82 85L82 133L164 133L164 115L245 115L245 97L327 97L327 55L409 55L409 73L491 73L491 91L573 91L573 85L655 85L655 85L736 85L736 73L818 73L818 85L900 85L900 67L900 29L900 35L818 35L818 41L736 41L736 35L655 35L655 59L573 59L573 65L491 65L491 59L409 59L409 23L327 23L327 83L245 83L245 83L164 83L164 83L82 83L82 59L0 59Z" fill="#ffdd55"/><path d="M0 127L82 127L82 175L164 175L164 133L245 133L245 115L327 115L327 115L409 115L409 139L491 139L491 139L573 139L573 145L655 145L655 157L736 157L736 121L818 121L818 133L900 133L900 121L900 65L900 83L818 83L818 71L736 71L736 83L655 83L655 83L573 83L573 89L491 89L491 71L409 71L409 53L327 53L327 95L245 95L245 113L164 113L164 131L82 131L82 83L0 83Z" fill="#ffc04a"/><path d="M0 145L82 145L82 217L164 217L164 163L245 163L245 127L327 127L327 127L409 127L409 181L491 181L491 181L573 181L573 169L655 169L655 199L736 199L736 163L818 163L818 169L900 169L900 139L900 119L900 131L818 131L818 119L736 119L736 155L655 155L655 143L573 143L573 137L491 137L491 137L409 137L409 113L327 113L327 113L245 113L245 131L164 131L164 173L82 173L82 125L0 125Z" fill="#ffa347"/><path d="M0 199L82 199L82 277L164 277L164 193L245 193L245 151L327 151L327 187L409 187L409 205L491 205L491 229L573 229L573 223L655 223L655 217L736 217L736 205L818 205L818 193L900 193L900 157L900 137L900 167L818 167L818 161L736 161L736 197L655 197L655 167L573 167L573 179L491 179L491 179L409 179L409 125L327 125L327 125L245 125L245 161L164 161L164 215L82 215L82 143L0 143Z" fill="#f98749"/><path d="M0 445L82 445L82 331L164 331L164 337L245 337L245 427L327 427L327 313L409 313L409 271L491 271L491 337L573 337L573 301L655 301L655 373L736 373L736 247L818 247L818 271L900 271L900 217L900 155L900 191L818 191L818 203L736 203L736 215L655 215L655 221L573 221L573 227L491 227L491 203L409 203L409 185L327 185L327 149L245 149L245 191L164 191L164 275L82 275L82 197L0 197Z" fill="#ed6b4e"/><path d="M0 505L82 505L82 397L164 397L164 415L245 415L245 463L327 463L327 403L409 403L409 343L491 343L491 367L573 367L573 403L655 403L655 469L736 469L736 367L818 367L818 397L900 397L900 361L900 215L900 269L818 269L818 245L736 245L736 371L655 371L655 299L573 299L573 335L491 335L491 269L409 269L409 311L327 311L327 425L245 425L245 335L164 335L164 329L82 329L82 443L0 443Z" fill="#dd5154"/><path d="M0 523L82 523L82 433L164 433L164 505L245 505L245 505L327 505L327 463L409 463L409 427L491 427L491 427L573 427L573 445L655 445L655 547L736 547L736 427L818 427L818 445L900 445L900 391L900 359L900 395L818 395L818 365L736 365L736 467L655 467L655 401L573 401L573 365L491 365L491 341L409 341L409 401L327 401L327 461L245 461L245 413L164 413L164 395L82 395L82 503L0 503Z" fill="#c9395a"/><path d="M0 601L82 601L82 601L164 601L164 601L245 601L245 601L327 601L327 601L409 601L409 601L491 601L491 601L573 601L573 601L655 601L655 601L736 601L736 601L818 601L818 601L900 601L900 601L900 389L900 443L818 443L818 425L736 425L736 545L655 545L655 443L573 443L573 425L491 425L491 425L409 425L409 461L327 461L327 503L245 503L245 503L164 503L164 431L82 431L82 521L0 521Z" fill="#b0235f"/></svg>